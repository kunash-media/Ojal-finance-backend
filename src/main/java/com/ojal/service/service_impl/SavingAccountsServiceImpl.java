package com.ojal.service.service_impl;


import com.ojal.enum_accounts.AccountType;
import com.ojal.global_exception.ResourceNotFoundException;
import com.ojal.model_entity.SavingAccountsEntity;
import com.ojal.model_entity.TransactionEntity;
import com.ojal.model_entity.UsersEntity;
import com.ojal.model_entity.dto.request.SavingAccountDetailsDto;
import com.ojal.model_entity.dto.request.SavingAccountsDto;
import com.ojal.model_entity.dto.request.TransactionDto;
import com.ojal.repository.SavingAccountsRepository;
import com.ojal.repository.TransactionRepository;
import com.ojal.repository.UsersRepository;
import com.ojal.service.SavingAccountsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class SavingAccountsServiceImpl implements SavingAccountsService {

    private final SavingAccountsRepository savingAccountsRepository;
    private final UsersRepository userRepository;
    private final TransactionRepository transactionRepository;

    @Value("${account.savings.default-minimum-balance:1000}")
    private BigDecimal defaultMinimumBalance;

    @Autowired
    public SavingAccountsServiceImpl(
            SavingAccountsRepository savingAccountsRepository,
            UsersRepository userRepository,
            TransactionRepository transactionRepository) {
        this.savingAccountsRepository = savingAccountsRepository;
        this.userRepository = userRepository;
        this.transactionRepository = transactionRepository;
    }

    @Override
    @Transactional
    public SavingAccountsEntity createAccount(String userId, SavingAccountsDto dto) {

        UsersEntity user = userRepository.findByUserId(userId);

        if(user == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found with ID: "+userId);
        }
        // Validate initial deposit
        BigDecimal minimumRequired = defaultMinimumBalance;
        if (dto.getInitialDeposit() == null || dto.getInitialDeposit().compareTo(minimumRequired) < 0) {
            throw new IllegalArgumentException(
                    "Initial deposit must be at least the minimum balance amount of " + minimumRequired);
        }

        // Create new savings account
        SavingAccountsEntity account = new SavingAccountsEntity();

        account.setUser(user);

        account.setBalance(dto.getInitialDeposit());
        account.setInterestRate(dto.getInterestRate());
        account.setMinimumBalance(minimumRequired);

        // The account number will be generated by the @PrePersist method in the entity

        return savingAccountsRepository.save(account);
    }

    @Override
    public SavingAccountsEntity findByAccountNumber(String accountNumber) {
        return savingAccountsRepository.findByAccountNumber(accountNumber)
                .orElseThrow(() -> new ResourceNotFoundException("Saving Account", "accountNumber", accountNumber));
    }

    @Override
    public SavingAccountDetailsDto getAccountWithTransactions(String accountNumber) {
        // Get the account
        SavingAccountsEntity account = findByAccountNumber(accountNumber);

        // Get associated transactions
        List<TransactionEntity> transactions = transactionRepository
                .findBySavingAccount_AccountNumberOrderByDateDesc(accountNumber);

        // Create DTO
        SavingAccountDetailsDto dto = new SavingAccountDetailsDto();
        dto.setId(account.getId());
        dto.setName(account.getUser().getName());
        dto.setAccountNumber(account.getAccountNumber());
        dto.setCreatedAt(account.getCreatedDate());
        dto.setAccountType(AccountType.SAVING_AC.name());
        dto.setCurrentBalance(account.getBalance());
        dto.setInterestRate(account.getInterestRate());
        dto.setStatus(account.getStatus().name());

        // Map transactions to DTOs
        List<TransactionDto> transactionDtos = transactions.stream()
                .map(this::mapToDto)
                .collect(Collectors.toList());
        dto.setTransactionData(transactionDtos);

        return dto;
    }

    private TransactionDto mapToDto(TransactionEntity entity) {
        TransactionDto dto = new TransactionDto();
        dto.setId(entity.getId());
        dto.setDate(entity.getDate());
        dto.setAmount(entity.getAmount());
        dto.setPayMode(entity.getPayMode());
        dto.setUtrNo(entity.getUtrNo());
        dto.setCash(entity.getCash());
        dto.setChequeNumber(entity.getChequeNumber());
        dto.setNote(entity.getNote());
        dto.setBalanceAfter(entity.getBalanceAfter());
        return dto;
    }
}